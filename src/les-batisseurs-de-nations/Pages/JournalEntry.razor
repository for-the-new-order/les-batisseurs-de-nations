@page "/streams/seasons/{seasonNumber:int}/episodes/{episodeNumber:int}"
@inject IEpisodesService EpisodesService
@inject UserOptions options
@inject Random Random


@switch (State)
{
    case PageState.NotLoaded:
    case PageState.Loading:
        <PageHeader Skeleton="true" />
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-7">
            <MudGrid>
                <MudItem sm="6">
                    <StreamLoadingCard />
                </MudItem>
                <MudItem sm="6">
                    <MudCard>
                        <MudCardContent>
                            <MudSkeleton SkeletonType="SkeletonType.Rectangle" Height="400px" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                <MudItem sm="12">
                    <MudCard>
                        <MudCardContent>
                            <MudSkeleton Height="40px" Width="90%" />
                            <MudSkeleton Height="40px" Width="90%" />
                            <MudSkeleton Height="40px" Width="90%" />
                            <MudSkeleton Height="40px" Width="90%" />
                            <MudSkeleton Height="40px" Width="90%" />
                        </MudCardContent>
                    </MudCard>
                </MudItem>
            </MudGrid>
        </MudContainer>
        break;
    case PageState.Loaded:
        <PageHeader Title="@Title" Description="@HeaderDescription" Items="_items" />
        <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="pt-7">
            <MudGrid>
                <MudItem md="6">
                    <StreamCard Info="Episode" HideAction="true" />
                </MudItem>
                <MudItem md="6">
                    <MudCard>
                        <MudCardContent>
                            <MudTabs Position="@Position.Left" Border="true"
                                     ApplyEffectsToContainer="true" PanelClass="pa-6" TabPanelClass="justify-flex-end">
                                @foreach (var character in PlayersWithSheet)
                                {
                                    var disabled = !character.HasCharacterSheetUri;
                                    <MudTabPanel Text="@character.DisplayName" Disabled="disabled">
                                        <a href="@character.CharacterSheetUri" target="_blank">
                                            <img src="@character.CharacterSheetImageUri" alt="@($"Fiche de {character.DisplayName}")" style="width: 100%;" />
                                        </a>
                                    </MudTabPanel>
                                }
                            </MudTabs>
                        </MudCardContent>
                    </MudCard>
                </MudItem>
                @if (Episode.HasJournalEntries)
                {
                    foreach (var entry in Episode.JournalEntries)
                    {
                        <MudItem md="12">
                            <MudCard>
                                <MudCardHeader>
                                    <CardHeaderAvatar>
                                        <MudAvatar Image="@entry.Author.ProfileImageUri" />
                                    </CardHeaderAvatar>
                                    <CardHeaderContent>
                                        <MudText Typo="Typo.body1">@entry.Author.DisplayName</MudText>
                                        <MudText Typo="Typo.body2">Rapports de missions: @entry.PublishedDate.ToString("D", options.Culture)</MudText>
                                    </CardHeaderContent>
                                </MudCardHeader>
                                <MudCardContent Class="journal-entry-content">
                                    @((MarkupString)entry.Content)
                                </MudCardContent>
                            </MudCard>
                        </MudItem>
                    }
                }
                else
                {
                    <MudItem md="12">
                        <MudCard>
                            <MudCardContent Class="journal-entry-content">
                                Aucune entrée de journal disponible
                            </MudCardContent>
                        </MudCard>
                    </MudItem>
                }
            </MudGrid>
        </MudContainer>
        break;
    default:
        <NotFound Title="Episode introuvable"
                  Description="L'épisode que vous recherchez n'existe pas." />
        break;
}

@code {
    [Parameter]
    public int SeasonNumber { get; set; }

    [Parameter]
    public int EpisodeNumber { get; set; }

    PageState State { get; set; } = PageState.NotLoaded;
    EpisodeInfo Episode { get; set; }

    string Title => $"Détails de l'épisode {Episode.Episode} de la saison {Episode.Season}";
    string SubTitle => State switch
    {
        PageState.NotFound => "Épisode introuvable",
        PageState.Loaded => $"Saison {Episode.Season} épisode {Episode.Episode}",
        _ => "..."
    };

    IEnumerable<Player> PlayersWithSheet { get; set; } = Enumerable.Empty<Player>();

    protected async override Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        State = PageState.Loading;
        //await Task.Delay(2000);
        Episode = await EpisodesService.FindAsync(SeasonNumber, EpisodeNumber);
        State = Episode == null ? PageState.NotFound : PageState.Loaded;
        if (Episode != null)
        {
            PlayersWithSheet = Episode.Players;//.Where(p => p.HasCharacterSheetImageUri);
        }
    }

    enum PageState
    {
        NotLoaded,
        Loading,
        Loaded,
        NotFound
    }

    //private ListGridType gutter = new ListGridType
    //{
    //    Gutter = 8,
    //    Xs = 1,
    //    Sm = 2,
    //    Md = 4,
    //    Lg = 4,
    //    Xl = 6,
    //    Xxl = 3,
    //    Column = 2
    //};

    private List<BreadcrumbItem> _items => new List<BreadcrumbItem>
{
        new BreadcrumbItem("Accueil", href: "/", icon: MudBlazor.Icons.Outlined.Home),
        new BreadcrumbItem("Streams", href: "/streams", icon: MudBlazor.Icons.Outlined.PlayArrow),
        new BreadcrumbItem(SubTitle, href: null, disabled: true, icon: MudBlazor.Icons.Outlined.PlayArrow),
    };

    private string HeaderDescription => $"Épisode du {Episode.StartDate.ToString("D", options.Culture)}";
}