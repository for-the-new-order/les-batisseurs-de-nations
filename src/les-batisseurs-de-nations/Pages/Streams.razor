@page "/streams"
@inject IEpisodesService EpisodesService

<Timeline Mode="alternate" Reverse="true">
    @if (EpisodesLoaded)
    {
        foreach (var episode in Episodes)
        {
            if (episode.State == StreamState.Future)
            {
                <TimelineItem Dot="futureIcon">
                    <StreamCard Info="episode" />
                </TimelineItem>
            }
            else
            {
                <TimelineItem Dot="playIcon">
                    <StreamCard Info="episode" />
                </TimelineItem>
            }
        }
    }
    else
    {
        <TimelineItem Dot="playIcon">
            <StreamLoadingCard />
        </TimelineItem>
        <TimelineItem Dot="playIcon">
            <StreamLoadingCard />
        </TimelineItem>
        <TimelineItem Dot="playIcon">
            <StreamLoadingCard />
        </TimelineItem>
    }
</Timeline>

@code {
    RenderFragment playIcon =
@<Template>
    <Icon Type="play-circle" Style="font-size: 16px;" />
</Template>;
    RenderFragment futureIcon = 
@<Template>
    <Icon Type="play-circle" Spin Style="font-size: 16px;" />
</Template>;

    bool EpisodesLoaded => Episodes != null;
    IEnumerable<EpisodeInfo> Episodes;
    protected async override Task OnInitializedAsync()
    {
        Console.WriteLine("OnInitializedAsync");
        await base.OnInitializedAsync();
        Episodes = await EpisodesService.AllAsync();
        Console.WriteLine("Episodes: {0}", Episodes.Count());
    }
}

