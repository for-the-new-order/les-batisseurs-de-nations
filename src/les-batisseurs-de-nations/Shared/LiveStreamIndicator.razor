@inject IEpisodesService EpisodesService
@inject NavigationManager NavigationManager


@if (_nextEpisode != null)
{
    var text = "";
    switch (_nextEpisode.State)
    {
        case StreamState.Ended:
            text = "ENDED";
            break;
        case StreamState.Playing:
            text = "LIVE STREAM";
            break;
        case StreamState.StartingSoon:
            text = "STARTING SOON";
            break;
        case StreamState.Future:
            break;
        case StreamState.MightStillBeOn:
            text = "MIGHT STILL BE LIVE";
            break;
    }

    <a href="@_nextEpisode.Streamer.ChannelUri" target="_blank" class="mr-3">
        <MudTooltip Text="@_nextEpisode.Streamer.DisplayName">
            <MudAvatar Image="@_nextEpisode.Streamer.ProfileImageUri"></MudAvatar>
        </MudTooltip>
    </a>
    @if (!string.IsNullOrEmpty(text))
    {
        <div class="live-stream">
            &#x29BF;&nbsp;@text
        </div>
        if (_nextEpisode.State == StreamState.StartingSoon)
        {
            <text>&nbsp;</text>
            <CountdownClock Target="_nextEpisode.StartDate" />
        }
    }
    else if (_nextEpisode.SoonAfterEnd > DateTime.UtcNow.ConvertUtcToEasternTime())
    {
        <div class="d-flex flex-column">
            <div>
                Prochain épisode:
                <CountdownClock Target="_nextEpisode.StartDate" />
            </div>
            @if (_nextEpisode.SoonBeforeStart > DateTime.UtcNow.ConvertUtcToEasternTime())
            {
                <small>
                    Les joueurs doivent rejoindre le Hall dans
                    <CountdownClock Target="_nextEpisode.SoonBeforeStart" DisplaySeconds="false" />
                </small>
            }
            else
            {
                <small>La prépartie est en cours</small>
            }
        </div>
    }
    <RefreshLiveStream NextEpisode="_nextEpisode" StateHasChangedDelegate="async () => await StateHasChangedDelegateAsync()" RefreshAfterEnded="true" />
}


@code{
    private EpisodeInfo _nextEpisode;
    private bool _isLive => _nextEpisode != null && _nextEpisode.IsLive;
    private bool _isHomePage = false;

    protected override async Task OnInitializedAsync()
    {
        _nextEpisode = await EpisodesService.FindNextAsync(DateTime.UtcNow.ConvertUtcToEasternTime());
        _isHomePage = new Uri(NavigationManager.Uri).AbsolutePath == "/";
    }

    private async Task StateHasChangedDelegateAsync()
    {
        if (_nextEpisode.State == StreamState.Ended)
        {
            _nextEpisode = await EpisodesService.FindNextAsync(DateTime.UtcNow.ConvertUtcToEasternTime());
        }
        StateHasChanged();
    }
}