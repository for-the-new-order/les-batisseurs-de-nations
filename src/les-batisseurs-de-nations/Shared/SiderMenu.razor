@inject UserOptions options;
@inject IEpisodesService EpisodesService
@inject ITwitchChannelsService ChannelService
<MudNavMenu>
    <MudNavLink Href="/" Icon="@MudBlazor.Icons.Outlined.Home" Match="NavLinkMatch.All">Accueil</MudNavLink>

    <MudNavLink Disabled="true" Icon="@MudBlazor.Icons.Outlined.Build">Constructions</MudNavLink>
    <MudNavLink Disabled="true" Icon="@MudBlazor.Icons.Outlined.Interests">Resources</MudNavLink>
    <MudNavLink Disabled="true" Icon="@MudBlazor.Icons.Filled.LocalFireDepartment">Le guide des nains</MudNavLink>

    <MudNavGroup Title="Chaines" Icon="@MudBlazor.Icons.Outlined.CollectionsBookmark">
        <MudNavLink Href="/channels" Icon="@MudBlazor.Icons.Outlined.CollectionsBookmark" Match="NavLinkMatch.All">Toutes les chaines</MudNavLink>
        @foreach (var channel in Channels)
        {
            var channelLink = $"/channels/{channel.ChannelName}";
            <MudNavLink Href="@channelLink" Icon="@MudBlazor.Icons.Outlined.PlayArrow">@channel.DisplayName</MudNavLink>
        }
    </MudNavGroup>

    <MudNavGroup Title="Episodes" Expanded="true" HideExpandIcon="true" Icon="@MudBlazor.Icons.Outlined.VideoLibrary">
        <MudNavLink Href="/streams" Icon="@MudBlazor.Icons.Outlined.VideoLibrary" Match="NavLinkMatch.All">Tous les épisodes</MudNavLink>
        @foreach (var group in EpisodeGroups)
        {
            <MudNavGroup Title="@group.GroupTitle" Expanded="@group.Expanded" HideExpandIcon="false" Icon="@MudBlazor.Icons.Outlined.VideoLibrary">
                @foreach (var episode in group.Episodes)
                {
                    var episodeKey = $"S{episode.Season:00}E{episode.Number:00}";
                    var episodeLink = $"/streams/seasons/{episode.Season}/episodes/{episode.Number}";
                    var episodeTitle = $"Episode {episode.Number}";
                    var icon = episode.HasTeamMembers
                        ? MudBlazor.Icons.Sharp.LocalFireDepartment
                        : episode.HasJournalEntries ? MudBlazor.Icons.Sharp.CheckBox : MudBlazor.Icons.Sharp.CheckBoxOutlineBlank;
                    var iconColor = episode.HasTeamMembers
                        ? Color.Error
                        : Color.Dark;

                    <MudNavLink Href="@episodeLink" Icon="@icon" IconColor="@iconColor">@episodeTitle</MudNavLink>
                }
            </MudNavGroup>
        }
    </MudNavGroup>

</MudNavMenu>

@*<Menu Mode="MenuMode.Inline"
          Theme="options.MenuTheme"
          DefaultOpenKeys=@(new[] { "seasons" })
          DefaultSelectedKeys=@(new[] {"home"})>
        <MenuItem Key="home" Icon="home" RouterLink="/" Title="Accueil" RouterMatch="NavLinkMatch.All"></MenuItem>
        <MenuItem Key="streams" ChildContent=streamMenuItemContent RouterLink="/streams" RouterMatch="NavLinkMatch.Prefix"></MenuItem>
        <SubMenu Key="seasons" TitleTemplate="seasonsMenuItemContent">
        </SubMenu>
    </Menu>
        private readonly RenderFragment streamMenuItemContent =
        @<span>
            <TwitchIcon />
            <span>Streams</span>
        </span>;

        private readonly RenderFragment seasonsMenuItemContent =
        @<span>
            <JournalIcon />
            <span>Episodes</span>
        </span>;

*@
@code{
        IEnumerable<TwitchChannel> Channels { get; set; }
        IEnumerable<(string GroupTitle, bool Expanded, IOrderedEnumerable<EpisodeInfo> Episodes)> EpisodeGroups { get; set; }

    protected async override Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        var episodes = await EpisodesService.AllAsync();
        var futureEpisodes = episodes.Where(x => x.EndDate > DateTime.UtcNow).OrderBy(x => x.StartDate);
        var pastEpisodes = episodes.Except(futureEpisodes).OrderBy(x => x.StartDate);

        EpisodeGroups = new[] {
            ("Épisodes passés", false, pastEpisodes),
            ("Épisodes à venir", true, futureEpisodes),
        };

        Channels = await ChannelService.AllAsync();
    }
}