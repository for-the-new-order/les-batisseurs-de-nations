@inject UserOptions options
@inject Random Random
 
<Card Bordered Title="@CardTitle" Id="@CardId">
    <CardTabs>
        <Tabs DefaultActiveKey="3">
            <TabPane Key="1">
                <Tab>Episode</Tab>
                <ChildContent>
                    <Space Align="left" Class="stream-card-space">
                        <SpaceItem Style="text-align: left;">
                            <Tooltip Title=@Info.Streamer.DisplayName Placement="PlacementType.Top">
                                <Unbound>
                                    <Avatar Size="100" Src="@Info.Streamer.ProfileImageUri" Alt="@Info.Streamer.DisplayName" RefBack="@context" />
                                </Unbound>
                            </Tooltip>
                            <Divider />
                            <AvatarGroup>
                                @foreach (var player in Info.Players)
                                {
                                    var size = player.IsTeamMember ? "large" : "default";
                                    <Tooltip Title=@player.DisplayName Placement="PlacementType.Bottom">
                                        <Unbound>
                                            @if (player.HasProfileImageUri)
                                            {
                                                <Avatar Src="@player.ProfileImageUri" RefBack="@context" Size="@size" />
                                            }
                                            else
                                            {
                                                var style = string.Format("background-color: #{0:X6};", Random.Next(0x1000000));
                                                <Avatar Style="@style" Icon="user" RefBack="@context" />
                                            }
                                        </Unbound>
                                    </Tooltip>
                                }
                            </AvatarGroup>
                        </SpaceItem>
                        <SpaceItem>
                            <p>@Description</p>
                            @if (!string.IsNullOrEmpty(Info.Description))
                            {
                                <p>@Info.Description</p>
                            }
                            else if (Info.HasYouTubeUri)
                            {
                                <p>&nbsp;</p>
                            }
                            @if (Info.HasYouTubeUri)
                            {
                                <iframe src="@Info.YouTubeEmbededUri" width="560" height="315" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
                            }
                        </SpaceItem>
                    </Space>
                </ChildContent>
            </TabPane>
            <TabPane Key="2">
                <Tab>Joueurs</Tab>
                <ChildContent>
                    <AntList DataSource="@Info.Players.Where(p => p.HasCharacterSheetImageUri)" TItem="Player">
                        <ListItem>
                            <ListItemMeta>
                                <DescriptionTemplate>
                                    <a href="@context.CharacterSheetUri" target="_blank">
                                        <Image Src="@context.CharacterSheetImageUri" Alt="@($"Fiche de {context.DisplayName}")" />
                                    </a>
                                </DescriptionTemplate>
                            </ListItemMeta>
                        </ListItem>
                    </AntList>
                </ChildContent>
            </TabPane>
            @if (Info.HasJournalEntries)
            {
                <TabPane Key="3">
                    <Tab>Rapports de missions</Tab>
                    <ChildContent>
                        <AntList DataSource="@Info.JournalEntries" TItem="JournalEntry" Style="text-align: left;">
                            <ListItem>
                                <ListItemMeta>
                                    <AvatarTemplate>
                                        <Tooltip Title=@context.Author.DisplayName Placement="PlacementType.Top">
                                            <Unbound Context="c">
                                                @if (context.Author.HasProfileImageUri)
                                                {
                                                    <Avatar Src="@context.Author.ProfileImageUri" RefBack="@c" Size="75" />
                                                }
                                                else
                                                {
                                                    var style = string.Format("background-color: #{0:X6};", Random.Next(0x1000000));
                                                    <Avatar Style="@style" Icon="user" RefBack="@c" Size="75" />
                                                }
                                            </Unbound>
                                        </Tooltip>
                                    </AvatarTemplate>
                                    <TitleTemplate>
                                        <div>
                                            <h3>
                                                @if (context.HasTitle)
                                                {
                                                    @context.Title
                                                }
                                                else
                                                {
                                                    <Text>Rapport de mission</Text>
                                                }
                                            </h3>
                                            <div>@context.PublishedDate.ToShortDateString()</div>
                                        </div>
                                    </TitleTemplate>
                                    <DescriptionTemplate>
                                        @if (context.HasAbstract)
                                        {
                                            @((MarkupString)context.Abstract)
                                        }
                                        else
                                        {
                                            @((MarkupString)context.GenerateAbstractFromContent())
                                        }
                                    </DescriptionTemplate>
                                </ListItemMeta>
                            </ListItem>
                        </AntList>
                    </ChildContent>
                </TabPane>
            }
        </Tabs>
    </CardTabs>
    <ActionTemplate>
        <CardAction>
            <a href="@Info.Streamer.ChannelUri"
               title="Twitch channel: @Info.Streamer.DisplayName"
               target="_blank">
                <TwitchIcon />
                @Info.Streamer.DisplayName
            </a>
        </CardAction>
        @if (Info.HasYouTubeUri)
        {
            <CardAction>
                <a href="@Info.YouTubeEmbededUri"
                   title="Voir la vidéo en plein écran"
                   target="_blank">
                    <Icon Type="fullscreen" Theme="outline" />
                    Voir la vidéo en plein écran
                </a>
            </CardAction>
        }
        @if (Info.HasDiscordLink)
        {
            <CardAction>
                <a href="@Info.DiscordLink"
                   title="Lien vers l'événement Discord"
                   target="_blank">
                    <DiscordIcon />
                    Lien vers l'événement Discord
                </a>
            </CardAction>
        }
    </ActionTemplate>
</Card>

@code{
    private RenderFragment avatar => @<Avatar Size="100" Src="@Info.Streamer.ProfileImageUri" Alt="@Info.Streamer.DisplayName" />;

    private string CardId => $"card-season-{Info.Season}-episode-{Info.Episode}";

    private string CardTitle => $"Epidode {Info.Episode}: " + Info.State switch
    {
        StreamState.Future => "Prochain épisode des Batisseurs de Nations",
        StreamState.StartingSoon => "Démarrage du stream imminent",
        StreamState.Playing => "Épisode en cours",
        StreamState.MightStillBeOn => "L'épisode est peut-être encore en cours",
        StreamState.Ended when Info.HasTitle => Info.Title,
        _ => "Terminé"
    };

    private string Description => Info.State switch
    {
        StreamState.Ended => $"L'épisode a joué {Info.StartDate.ToString("dddd le d MMMM yyyy", options.Culture)}",
        _ when Info.StartDate.DayOfYear == Info.EndDate.DayOfYear => $"Débute {Info.StartDate.ToString("dddd le d MMMM yyyy à h\\:mm tt", options.Culture)} à {Info.EndDate.ToString("h\\:mm tt", options.Culture)} (GMT{DateTimeExtensions.EasternZone.BaseUtcOffset.Hours})",
        _ => $"Débute {Info.StartDate.ToString("dddd le d MMMM yyyy à h\\:mm tt", options.Culture)} et prend fin {Info.EndDate.ToString("dddd le d MMMM yyyy à h\\:mm tt", options.Culture)} (GMT{DateTimeExtensions.EasternZone.BaseUtcOffset.Hours})",

    };

    [Parameter]
    public EpisodeInfo Info { get; set; }
}