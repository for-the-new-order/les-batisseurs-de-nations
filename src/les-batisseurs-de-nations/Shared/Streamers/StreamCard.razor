@inject UserOptions options
@inject Random Random

<MudCard>
    <MudCardHeader>
        <CardHeaderAvatar>
            @if (Info.HasTeamMembers)
            {
                <MudTooltip Text="Les batisseurs de nations" Placement="Placement.Top">
                    <MudIcon Icon="@MudBlazor.Icons.Sharp.LocalFireDepartment" Size="@Size.Large" Color="Color.Error"></MudIcon>
                </MudTooltip>
            }
            <MudTooltip Text="@Info.Streamer.DisplayName" Placement="Placement.Top">
                <MudAvatar Image="@Info.Streamer.ProfileImageUri" Class="ml-n3"></MudAvatar>
            </MudTooltip>
        </CardHeaderAvatar>
        <CardHeaderContent>
            <MudText Typo="Typo.body1">@CardTitle</MudText>
            <MudText Typo="Typo.body2">@Info.Streamer.DisplayName</MudText>
        </CardHeaderContent>
        <CardHeaderActions>
            <div class="ma-3">
                @foreach (var player in Info.Players)
                {
                    var size = player.IsTeamMember ? Size.Medium : Size.Medium;
                    <MudTooltip Text="@player.DisplayName" Placement="Placement.Top">
                        @if (player.HasProfileImageUri)
                        {
                            <MudAvatar Image="@player.ProfileImageUri" Size="@size" Class="ml-n3" />
                        }
                        else
                        {
                            var style = string.Format("background-color: #333; color: #666; border:1px solid #444;");
                            <MudAvatar Size="@Size.Small" Class="ml-n1" Variant="Variant.Filled" Style="@style">
                                <MudIcon Icon="iconfont icon-user" />
                            </MudAvatar>
                        }
                    </MudTooltip>
                }
            </div>
        </CardHeaderActions>
    </MudCardHeader>
    <MudCardContent>
        <MudText Typo="Typo.body1">@Info.GetPlayDescription(options)</MudText>
        @if (!string.IsNullOrEmpty(Info.Description))
        {
            <MudText Typo="Typo.body2">@Info.Description</MudText>
        }

        @if (Info.HasYouTubeUri)
        {
            <MudPaper Elevation="0" Class="youtube-iframe-container mt-3">
                <iframe src="@Info.YouTubeEmbededUri" width="560" height="315" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture" allowfullscreen></iframe>
            </MudPaper>
        }
        else
        {
            <MudPaper Elevation="0" Class="youtube-iframe-container mt-3 rounded-0">
                <div class="youtube-empty">
                    <MudIcon Style="font-size: 5rem;" Icon="@Icons.Filled.Videocam" />
                    <MudText Style="font-size: 2rem;">Enregistrement non disponible</MudText>
                </div>
            </MudPaper>
        }
    </MudCardContent>
    @if (!HideAction)
    {
        <MudCardActions Class="justify-flex-end">
            @{
                var count = Info.JournalEntries?.Count() ?? 0;
                var icon = count > 0 ? MudBlazor.Icons.Filled.RemoveRedEye : MudBlazor.Icons.Outlined.RemoveRedEye;
            }
            @if (count > 0)
            {
                var color = count > 0 ? Color.Success : Color.Default;
                <MudBadge Content="@count" Color="color" Overlap="true">
                    <MudButton StartIcon="@icon"
                               Link="@($"/streams/seasons/{Info.Season}/episodes/{Info.Number}")">Voir les détails de l'épisode</MudButton>
                </MudBadge>
            }
            else
            {
                <MudButton StartIcon="@icon"
                           Link="@($"/streams/seasons/{Info.Season}/episodes/{Info.Number}")">Voir les détails de l'épisode</MudButton>
            }
        </MudCardActions>
    }
</MudCard>

@code{
    //private RenderFragment avatar =>@<Avatar Size="100" Src="@Info.Streamer.ProfileImageUri" Alt="@Info.Streamer.DisplayName" />;

    private string CardId => $"card-season-{Info.Season}-episode-{Info.Number}";

    private string CardTitle => $"Epidode {Info.Number}: " + Info.State switch
    {
        StreamState.Future when Info.HasTeamMembers => "Prochain épisode des Batisseurs de Nations",
        StreamState.Future => "Épisode à venir",
        StreamState.StartingSoon => "Démarrage du stream imminent",
        StreamState.Playing => "Épisode en cours",
        StreamState.MightStillBeOn => "L'épisode est peut-être encore en cours",
        StreamState.Ended when Info.HasTitle => Info.Title,
        _ => "Terminé"
    };

    [Parameter]
    public EpisodeInfo Info { get; set; }

    [Parameter]
    public bool HideAction { get; set; }
}